apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: prometheus-leader-election
  namespace: monitoring
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prometheus-leader-election
  namespace: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prometheus-leader-election
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: monitoring
---
apiVersion: v1
data:
  prometheus-config.yaml: "global:\n  scrape_interval: 60s\n  scrape_timeout: 60s\n
    \ evaluation_interval: 60s\n  external_labels:\n    region: cc\n    monitor: infrastructure\n
    \   replica: A\nrule_files:\n\nscrape_configs:\n- job_name: kubernetes-pods\n
    \ scheme: http\n  tls_config:\n    insecure_skip_verify: true\n  kubernetes_sd_configs:\n
    \ - role: pod\n    namespaces:\n      names: []\n  relabel_configs:\n  - source_labels:\n
    \   - __meta_kubernetes_pod_annotation_prometheus_io_scrape\n    regex: 'true'\n
    \   replacement: \"$1\"\n    action: keep\n  - source_labels:\n    - __meta_kubernetes_pod_annotation_prometheus_io_path\n
    \   regex: \"(.+)\"\n    target_label: __metrics_path__\n    replacement: \"$1\"\n
    \   action: replace\n  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]\n
    \   action: replace\n    target_label: __scheme__\n    regex: (https?)\n  - source_labels:\n
    \   - __address__\n    - __meta_kubernetes_pod_annotation_prometheus_io_port\n
    \   regex: \"(.+):(?:\\\\d+);(\\\\d+)\"\n    target_label: __address__\n    replacement:
    \"${1}:${2}\"\n    action: replace\n  - source_labels: []\n    regex: __meta_kubernetes_pod_label_(.+)\n
    \   replacement: \"$1\"\n    action: labelmap\n  - source_labels:\n    - __meta_kubernetes_namespace\n
    \   regex: \"(.*)\"\n    target_label: namespace\n    replacement: \"$1\"\n    action:
    replace\n  - source_labels:\n    - __meta_kubernetes_pod_name\n    regex: \"(.*)\"\n
    \   target_label: pod\n    replacement: \"$1\"\n    action: replace\n  - source_labels:\n
    \   - __meta_kubernetes_pod_node_name\n    regex: \"(.*)\"\n    target_label:
    node\n    replacement: \"$1\"\n    action: replace\n\n- \n\n- job_name: kube-state-metrics\n
    \ scheme: http\n  static_configs:\n  - targets:\n    - kube-state-metrics:8080\n\n-
    job_name: kubelet\n  scheme: http\n  tls_config:\n    insecure_skip_verify: true\n
    \ kubernetes_sd_configs:\n  - role: node\n  relabel_configs:\n  - source_labels:
    [__address__]\n    action: replace\n    target_label: __address__\n    regex:
    (.+):(.+)\n    replacement: ${1}:10255\n  - source_labels:\n    - __meta_kubernetes_node_label_kubernetes_io_hostname\n
    \   regex: \"(.*)\"\n    target_label: node\n    replacement: \"$1\"\n    action:
    replace\n  - source_labels: []\n    regex: __meta_kubernetes_node_label_(.+)\n
    \   replacement: \"$1\"\n    action: labelmap\n\n- job_name: 'kubernetes-endpoints'\n
    \ scheme: http\n  tls_config:\n    insecure_skip_verify: true\n  kubernetes_sd_configs:\n
    \ - role: endpoints\n    namespaces:\n      names: []\n  relabel_configs:\n  -
    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_scrape\n
    \   regex: 'true'\n    replacement: \"$1\"\n    action: keep\n  - action: labelmap\n
    \   regex: __meta_kubernetes_service_label_(.+)\n  - source_labels: [__meta_kubernetes_namespace]\n
    \   action: replace\n    target_label: kubernetes_namespace\n  - source_labels:
    [__meta_kubernetes_service_name]\n    action: replace\n    target_label: kubernetes_name\n\n-
    job_name: 'kubernetes-cadvisor'\n  scheme: http\n  tls_config:\n    insecure_skip_verify:
    true\n  kubernetes_sd_configs:\n  - role: node\n  metric_relabel_configs:\n  -
    source_labels:\n    - pod_name\n    regex: \"(.*)\"\n    target_label: pod\n    replacement:
    \"$1\"\n    action: replace\n  - source_labels:\n    - container_name\n    regex:
    \"(.*)\"\n    target_label: container\n    replacement: \"$1\"\n    action: replace\n
    \ relabel_configs:\n  - source_labels: [__address__]\n    action: replace\n    target_label:
    __address__\n    regex: (.+):(.+)\n    replacement: ${1}:10255\n  - source_labels:\n
    \   - pod_name\n    regex: \"(.*)\"\n    target_label: pod\n    replacement: \"$1\"\n
    \   action: replace\n  - source_labels:\n    - __meta_kubernetes_node_label_kubernetes_io_hostname\n
    \   regex: \"(.*)\"\n    target_label: node\n    replacement: \"$1\"\n    action:
    replace\n  - action: labelmap\n    regex: __meta_kubernetes_node_label_(.+)\n
    \ - source_labels: [__meta_kubernetes_node_name]\n    regex: (.+)\n    target_label:
    __metrics_path__\n    replacement: /metrics/cadvisor\n\n- job_name: node-exporter\n
    \ kubernetes_sd_configs:\n  - role: pod\n    namespaces:\n      names:\n      -
    kube-system\n  relabel_configs:\n  - source_labels:\n    - __meta_kubernetes_pod_label_app\n
    \   action: keep\n    regex: node-exporter\n  - source_labels:\n    - __meta_kubernetes_namespace\n
    \   regex: \"(.*)\"\n    target_label: namespace\n    replacement: \"$1\"\n    action:
    replace\n  - source_labels:\n    - __meta_kubernetes_pod_name\n    regex: \"(.*)\"\n
    \   target_label: pod\n    replacement: \"$1\"\n    action: replace\n  - source_labels:\n
    \   - __meta_kubernetes_pod_node_name\n    regex: \"(.*)\"\n    target_label:
    node\n    replacement: \"$1\"\n    action: replace\n\n# sd\n- job_name: 'kubernetes-apiservers'\n
    \ kubernetes_sd_configs:\n  - role: endpoints\n  scheme: https\n  tls_config:\n
    \   ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n  bearer_token_file:
    /var/run/secrets/kubernetes.io/serviceaccount/token\n  relabel_configs:\n  - source_labels:
    [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]\n
    \   action: keep\n    regex: default;kubernetes;https\n\n# static\n- job_name:
    kube-apiserver\n  scheme: http\n  static_configs:\n  - targets:\n    - master01:8081\n\n-
    job_name: etcd\n  scheme: http\n  static_configs:\n  - targets:\n    - master01:2379\n\n-
    job_name: kube-scheduler\n  scheme: http\n  static_configs:\n  - targets:\n    -
    master01:10251\n\n- job_name: kube-controller-manager\n  scheme: http\n  static_configs:\n
    \ - targets:\n    - master01:10252\n"
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
spec:
  ports:
  - port: 9090
    targetPort: 9090
  selector:
    app: prometheus
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: prometheus
  name: prometheus
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
      labels:
        app: prometheus
    spec:
      containers:
      - args:
        - --v
        - --t
        - --p=/etc/prometheus
        - --c=curl -XPOST -sS -f http://localhost:9090/-/reload
        image: cr.d.xiaomi.net/containercloud/prom-reloader:mpath
        imagePullPolicy: Always
        name: prom-reloader
        volumeMounts:
        - mountPath: /etc/prometheus
          name: config
      - args:
        - while true; do leader=$(curl --silent http://localhost:4040/ 2>&1); echo
          $leader | grep $HOSTNAME && echo "come new leader $leader" && /bin/prometheus
          $PROMARGS; echo "now leader $leader"; sleep 10; done
        command:
        - sh
        - -c
        env:
        - name: PROMARGS
          value: --config.file=/etc/prometheus/prometheus-config.yaml --web.console.libraries=/etc/prometheus/console_libraries
            --web.console.templates=/etc/prometheus/consoles --storage.tsdb.path=/prometheus/data
            --storage.tsdb.retention=7d --web.enable-lifecycle
        image: cr.d.xiaomi.net/containercloud/prometheus:v2.15.1-alpine
        imagePullPolicy: Always
        name: prometheus
        ports:
        - containerPort: 9090
        volumeMounts:
        - mountPath: /etc/prometheus
          name: config
        - mountPath: /prometheus/data
          name: data
      - args:
        - --election=prometheus-leader-election
        - --election-namespace=$(NAMESPACE)
        - --use-cluster-credentials
        - --ttl=10s
        - --http=0.0.0.0:4040
        env:
        - name: PROMARGS
          value: --config.file=/etc/prometheus/prometheus-config.yaml --web.console.libraries=/etc/prometheus/console_libraries
            --web.console.templates=/etc/prometheus/consoles --storage.tsdb.path=/prometheus/data
            --storage.tsdb.retention=7d --web.enable-lifecycle
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: cr.d.xiaomi.net/containercloud/leader-elector:0.5
        imagePullPolicy: IfNotPresent
        name: leader-election
        ports:
        - containerPort: 4040
      dnsPolicy: ClusterFirst
      initContainers:
      - command:
        - chown
        - nobody
        - /prometheus/data
        image: cr.d.xiaomi.net/containercloud/busybox:latest
        name: chown
        volumeMounts:
        - mountPath: /prometheus/data
          name: data
      restartPolicy: Always
      serviceAccountName: prometheus
      volumes:
      - configMap:
          name: prometheus-config
        name: config
      - hostPath:
          path: /home/data/thanos
        name: data
